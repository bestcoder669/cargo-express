// packages/bot/prisma/seed.ts - –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ë–î
import { PrismaClient } from '@prisma/client'
import { config } from 'dotenv'

config()

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Seeding database...')

  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
  const countries = await Promise.all([
    prisma.country.upsert({
      where: { code: 'RU' },
      update: {},
      create: {
        id: 'RU',
        code: 'RU',
        name: '–†–æ—Å—Å–∏—è',
        nameEn: 'Russia',
        flagEmoji: 'üá∑üá∫',
        currency: 'RUB',
        shippingAvailable: false,
        purchaseAvailable: false,
        popularityScore: 0,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'US' },
      update: {},
      create: {
        id: 'US',
        code: 'US',
        name: '–°–®–ê',
        nameEn: 'United States',
        flagEmoji: 'üá∫üá∏',
        currency: 'USD',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 5,
        popularityScore: 100,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'CN' },
      update: {},
      create: {
        id: 'CN',
        code: 'CN',
        name: '–ö–∏—Ç–∞–π',
        nameEn: 'China',
        flagEmoji: 'üá®üá≥',
        currency: 'CNY',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 3,
        popularityScore: 95,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'DE' },
      update: {},
      create: {
        id: 'DE',
        code: 'DE',
        name: '–ì–µ—Ä–º–∞–Ω–∏—è',
        nameEn: 'Germany',
        flagEmoji: 'üá©üá™',
        currency: 'EUR',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 5,
        popularityScore: 85,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'GB' },
      update: {},
      create: {
        id: 'GB',
        code: 'GB',
        name: '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è',
        nameEn: 'United Kingdom',
        flagEmoji: 'üá¨üáß',
        currency: 'GBP',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 7,
        popularityScore: 80,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'TR' },
      update: {},
      create: {
        id: 'TR',
        code: 'TR',
        name: '–¢—É—Ä—Ü–∏—è',
        nameEn: 'Turkey',
        flagEmoji: 'üáπüá∑',
        currency: 'TRY',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 4,
        popularityScore: 75,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'KR' },
      update: {},
      create: {
        id: 'KR',
        code: 'KR',
        name: '–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è',
        nameEn: 'South Korea',
        flagEmoji: 'üá∞üá∑',
        currency: 'KRW',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 6,
        popularityScore: 70,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'JP' },
      update: {},
      create: {
        id: 'JP',
        code: 'JP',
        name: '–Ø–ø–æ–Ω–∏—è',
        nameEn: 'Japan',
        flagEmoji: 'üáØüáµ',
        currency: 'JPY',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 6,
        popularityScore: 65,
        isActive: true
      }
    }),
    prisma.country.upsert({
      where: { code: 'FR' },
      update: {},
      create: {
        id: 'FR',
        code: 'FR',
        name: '–§—Ä–∞–Ω—Ü–∏—è',
        nameEn: 'France',
        flagEmoji: 'üá´üá∑',
        currency: 'EUR',
        shippingAvailable: true,
        purchaseAvailable: true,
        purchaseCommission: 7,
        popularityScore: 60,
        isActive: true
      }
    })
  ])

  console.log(`‚úÖ Created ${countries.length} countries`)

  // –°–æ–∑–¥–∞–µ–º —Å–∫–ª–∞–¥—ã
  const warehouses = await Promise.all([
    prisma.warehouse.create({
      data: {
        countryId: 'US',
        name: 'Miami Warehouse',
        address: '1234 Ocean Drive, Miami, FL 33139',
        phone: '+1-305-123-4567',
        email: 'miami@cargoexpress.com',
        workingHours: 'Mon-Fri: 09:00-18:00 EST, Sat: 09:00-15:00 EST',
        timezone: 'America/New_York',
        maxWeightKg: 50,
        maxDeclaredValue: 2000,
        restrictions: JSON.stringify(['–õ–∏—Ç–∏–µ–≤—ã–µ –±–∞—Ç–∞—Ä–µ–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏', '–û—Ä—É–∂–∏–µ']),
        isActive: true
      }
    }),
    prisma.warehouse.create({
      data: {
        countryId: 'CN',
        name: 'Shanghai Warehouse',
        address: '888 Nanjing Road, Shanghai 200001',
        phone: '+86-21-1234-5678',
        email: 'shanghai@cargoexpress.com',
        workingHours: 'Mon-Sat: 09:00-18:00 CST',
        timezone: 'Asia/Shanghai',
        maxWeightKg: 50,
        maxDeclaredValue: 2000,
        restrictions: JSON.stringify(['–ë–∞—Ç–∞—Ä–µ–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏']),
        isActive: true
      }
    }),
    prisma.warehouse.create({
      data: {
        countryId: 'DE',
        name: 'Berlin Warehouse',
        address: 'Alexanderplatz 10, 10178 Berlin',
        phone: '+49-30-1234-5678',
        email: 'berlin@cargoexpress.com',
        workingHours: 'Mon-Fri: 09:00-18:00 CET',
        timezone: 'Europe/Berlin',
        maxWeightKg: 50,
        maxDeclaredValue: 2000,
        restrictions: JSON.stringify(['–ë–∞—Ç–∞—Ä–µ–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏', '–¢–∞–±–∞–∫']),
        isActive: true
      }
    })
  ])

  console.log(`‚úÖ Created ${warehouses.length} warehouses`)

  // –°–æ–∑–¥–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç–∞–≤–∫–∏
  const tariffs = await Promise.all([
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'US',
        toCountryId: 'RU',
        pricePerKg: 650,
        minPrice: 1500,
        deliveryDaysMin: 10,
        deliveryDaysMax: 18,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'CN',
        toCountryId: 'RU',
        pricePerKg: 450,
        minPrice: 1000,
        deliveryDaysMin: 12,
        deliveryDaysMax: 20,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'DE',
        toCountryId: 'RU',
        pricePerKg: 750,
        minPrice: 1500,
        deliveryDaysMin: 8,
        deliveryDaysMax: 15,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'GB',
        toCountryId: 'RU',
        pricePerKg: 800,
        minPrice: 1500,
        deliveryDaysMin: 10,
        deliveryDaysMax: 18,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'TR',
        toCountryId: 'RU',
        pricePerKg: 550,
        minPrice: 1200,
        deliveryDaysMin: 7,
        deliveryDaysMax: 14,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'KR',
        toCountryId: 'RU',
        pricePerKg: 700,
        minPrice: 1500,
        deliveryDaysMin: 10,
        deliveryDaysMax: 18,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'JP',
        toCountryId: 'RU',
        pricePerKg: 750,
        minPrice: 1500,
        deliveryDaysMin: 10,
        deliveryDaysMax: 18,
        isActive: true
      }
    }),
    prisma.shippingTariff.create({
      data: {
        fromCountryId: 'FR',
        toCountryId: 'RU',
        pricePerKg: 850,
        minPrice: 1700,
        deliveryDaysMin: 9,
        deliveryDaysMax: 16,
        isActive: true
      }
    })
  ])

  console.log(`‚úÖ Created ${tariffs.length} shipping tariffs`)

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏
  const cities = await Promise.all([
    prisma.city.create({ data: { name: '–ú–æ—Å–∫–≤–∞', region: '–ú–æ—Å–∫–≤–∞', isPopular: true, population: 12655000 }}),
    prisma.city.create({ data: { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', region: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', isPopular: true, population: 5384000 }}),
    prisma.city.create({ data: { name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', region: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1625000 }}),
    prisma.city.create({ data: { name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', region: '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1493000 }}),
    prisma.city.create({ data: { name: '–ö–∞–∑–∞–Ω—å', region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω', isPopular: true, population: 1257000 }}),
    prisma.city.create({ data: { name: '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', region: '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1244000 }}),
    prisma.city.create({ data: { name: '–ß–µ–ª—è–±–∏–Ω—Å–∫', region: '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1187000 }}),
    prisma.city.create({ data: { name: '–°–∞–º–∞—Ä–∞', region: '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1144000 }}),
    prisma.city.create({ data: { name: '–û–º—Å–∫', region: '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1139000 }}),
    prisma.city.create({ data: { name: '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', region: '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', isPopular: true, population: 1137000 }}),
    prisma.city.create({ data: { name: '–£—Ñ–∞', region: '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω', isPopular: true, population: 1125000 }}),
    prisma.city.create({ data: { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', region: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π', isPopular: true, population: 1095000 }})
  ])

  console.log(`‚úÖ Created ${cities.length} popular cities`)

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
  const categories = await Promise.all([
    prisma.productCategory.create({ data: { name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', icon: 'üì±', sortOrder: 1 }}),
    prisma.productCategory.create({ data: { name: '–û–¥–µ–∂–¥–∞', icon: 'üëï', sortOrder: 2 }}),
    prisma.productCategory.create({ data: { name: '–û–±—É–≤—å', icon: 'üëü', sortOrder: 3 }}),
    prisma.productCategory.create({ data: { name: '–ö–æ—Å–º–µ—Ç–∏–∫–∞', icon: 'üíÑ', sortOrder: 4 }}),
    prisma.productCategory.create({ data: { name: '–ë–ê–î—ã/–í–∏—Ç–∞–º–∏–Ω—ã', icon: 'üíä', sortOrder: 5 }}),
    prisma.productCategory.create({ data: { name: '–ò–≥—Ä—ã', icon: 'üéÆ', sortOrder: 6 }}),
    prisma.productCategory.create({ data: { name: '–î–ª—è –¥–æ–º–∞', icon: 'üè†', sortOrder: 7 }}),
    prisma.productCategory.create({ data: { name: '–ö–Ω–∏–≥–∏', icon: 'üìö', sortOrder: 8 }})
  ])

  console.log(`‚úÖ Created ${categories.length} product categories`)

  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –≤ .env)
  const adminTelegramId = process.env.BOT_ADMIN_IDS?.split(',')[0]
  if (adminTelegramId) {
    const admin = await prisma.admin.upsert({
      where: { telegramId: BigInt(adminTelegramId) },
      update: {},
      create: {
        telegramId: BigInt(adminTelegramId),
        firstName: 'Admin',
        role: 'SUPER_ADMIN',
        isActive: true
      }
    })
    console.log(`‚úÖ Created default admin with Telegram ID: ${adminTelegramId}`)
  }

  console.log('‚úÖ Database seeded successfully!')
}

main()
  .catch((e) => {
    console.error('‚ùå Seeding failed:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })