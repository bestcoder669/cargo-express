// packages/bot/src/scenes/shipping/index.ts - –°—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
import { Composer } from 'grammy'
import { createConversation } from '@grammyjs/conversations'
import type { BotContext, BotConversation } from '../../types/context'
import { prisma, generateOrderNumber } from '../../services/database'
import { getUserAddresses } from '../../services/user'
import { getCountriesKeyboard, getWeightKeyboard } from '../../keyboards/dynamic'
import { calculateShippingCost } from './calculator'
import { formatCurrency, formatDeliveryTime, escapeHtml } from '../../utils/formatter'
import { logger } from '../../utils/logger'
import Decimal from 'decimal.js'

export const shippingScene = new Composer<BotContext>()

// –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
shippingScene.callbackQuery('shipping:new', async (ctx) => {
  await ctx.answerCallbackQuery()
  
  if (!ctx.user) {
    await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
    return
  }
  
  await ctx.editMessageText(
    'üì¶ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—ã–ª–∫–∏\n\n' +
    '–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ—Å—ã–ª–∫–∞ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —Å–∫–ª–∞–¥–æ–≤?\n' +
    '–ò–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì¶ –ü–æ—Å—ã–ª–∫–∞ —É–∂–µ –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data: 'shipping:warehouse' }],
          [{ text: 'üè¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', callback_data: 'warehouses:list' }],
          [{ text: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'calculator:start' }],
          [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }]
        ]
      }
    }
  )
})

// –í—ã–±–æ—Ä —Å–∫–ª–∞–¥–∞
shippingScene.callbackQuery('shipping:warehouse', async (ctx) => {
  await ctx.answerCallbackQuery()
  await ctx.conversation.enter('shippingConversation')
})

// –û—Å–Ω–æ–≤–Ω–∞—è conversation –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
export async function shippingConversation(
  conversation: BotConversation,
  ctx: BotContext
): Promise<void> {
  try {
    const orderData: {
      fromCountryId?: string
      weight?: number
      description?: string
      declaredValue?: number
      declaredCurrency?: string
      recipientAddressId?: string
      totalCost?: Decimal
    } = {}

    // –®–ê–ì 1: –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
    await ctx.editMessageText(
      'üåç –ù–∞ –∫–∞–∫–æ–º —Å–∫–ª–∞–¥–µ –≤–∞—à–∞ –ø–æ—Å—ã–ª–∫–∞?',
      {
        reply_markup: await getCountriesKeyboard('shipping')
      }
    )

    const countryCtx = await conversation.waitForCallbackQuery(/^shipping:country:/)
    await countryCtx.answerCallbackQuery()
    
    orderData.fromCountryId = countryCtx.callbackQuery.data.replace('shipping:country:', '')
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
    const country = await prisma.country.findUnique({
      where: { id: orderData.fromCountryId },
      include: {
        warehouses: {
          where: { isActive: true },
          take: 1
        }
      }
    })

    if (!country || !country.warehouses[0]) {
      await ctx.reply('‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    // –®–ê–ì 2: –í—ã–±–æ—Ä –≤–µ—Å–∞
    await ctx.editMessageText(
      `‚öñÔ∏è –£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –ø–æ—Å—ã–ª–∫–∏\n\n` +
      `üá∑üá∫ –°–∫–ª–∞–¥: ${country.flagEmoji} ${country.name}\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π:',
      {
        reply_markup: await getWeightKeyboard(orderData.fromCountryId)
      }
    )

    const weightCtx = await conversation.waitFor(['callback_query:data', 'message:text'])
    
    if (weightCtx.callbackQuery) {
      await weightCtx.answerCallbackQuery()
      
      if (weightCtx.callbackQuery.data === 'weight:custom') {
        await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5):')
        const customWeightCtx = await conversation.waitFor('message:text')
        
        const weight = parseFloat(customWeightCtx.message!.text.replace(',', '.'))
        if (isNaN(weight) || weight <= 0 || weight > 50) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 0.1 –¥–æ 50 –∫–≥')
          return
        }
        orderData.weight = weight
      } else {
        orderData.weight = parseFloat(weightCtx.callbackQuery.data.replace('weight:', ''))
      }
    } else if (weightCtx.message?.text) {
      const weight = parseFloat(weightCtx.message.text.replace(',', '.'))
      if (isNaN(weight) || weight <= 0 || weight > 50) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç 0.1 –¥–æ 50 –∫–≥')
        return
      }
      orderData.weight = weight
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const shippingCost = await calculateShippingCost(
      orderData.fromCountryId!,
      orderData.weight!
    )

    // –®–ê–ì 3: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—ã–ª–∫–∏
    await ctx.reply(
      `üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—ã–ª–∫–∏\n\n` +
      `${country.flagEmoji} ${country.name} ‚Üí üá∑üá∫ –†–æ—Å—Å–∏—è\n` +
      `‚öñÔ∏è ${orderData.weight} –∫–≥ | üí∞ ${formatCurrency(shippingCost.cost)}\n\n` +
      '–ß—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ—Å—ã–ª–∫–µ?\n' +
      '(–¥–ª—è —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è)',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üëï –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å', callback_data: 'desc:clothes' },
              { text: 'üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', callback_data: 'desc:electronics' }
            ],
            [
              { text: 'üíÑ –ö–æ—Å–º–µ—Ç–∏–∫–∞', callback_data: 'desc:cosmetics' },
              { text: 'üìö –ö–Ω–∏–≥–∏/–î–æ–∫—É–º–µ–Ω—Ç—ã', callback_data: 'desc:books' }
            ],
            [
              { text: 'üéÅ –ü–æ–¥–∞—Ä–∫–∏', callback_data: 'desc:gifts' },
              { text: 'üíä –ë–ê–î—ã/–í–∏—Ç–∞–º–∏–Ω—ã', callback_data: 'desc:supplements' }
            ],
            [
              { text: 'üè† –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞', callback_data: 'desc:home' },
              { text: 'üéÆ –ò–≥—Ä—ã/–ò–≥—Ä—É—à–∫–∏', callback_data: 'desc:toys' }
            ],
            [{ text: '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'desc:custom' }]
          ]
        }
      }
    )

    const descCtx = await conversation.waitForCallbackQuery(/^desc:/)
    await descCtx.answerCallbackQuery()
    
    const descType = descCtx.callbackQuery.data.replace('desc:', '')
    
    if (descType === 'custom') {
      await ctx.reply('‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—ã–ª–∫–∏:')
      const customDescCtx = await conversation.waitFor('message:text')
      orderData.description = customDescCtx.message!.text
    } else {
      const descriptions: Record<string, string> = {
        clothes: '–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å',
        electronics: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
        cosmetics: '–ö–æ—Å–º–µ—Ç–∏–∫–∞',
        books: '–ö–Ω–∏–≥–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã',
        gifts: '–ü–æ–¥–∞—Ä–∫–∏',
        supplements: '–ë–ê–î—ã –∏ –≤–∏—Ç–∞–º–∏–Ω—ã',
        home: '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
        toys: '–ò–≥—Ä—ã –∏ –∏–≥—Ä—É—à–∫–∏'
      }
      orderData.description = descriptions[descType] || '–õ–∏—á–Ω—ã–µ –≤–µ—â–∏'
    }

    // –®–ê–ì 4: –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    await ctx.reply(
      `üí∞ –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n` +
      `${country.flagEmoji} ${country.name} ‚Üí üá∑üá∫ –†–æ—Å—Å–∏—è\n` +
      `‚öñÔ∏è ${orderData.weight} –∫–≥ | üìù ${orderData.description}\n\n` +
      '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ—Å—ã–ª–∫–∏:\n' +
      '(–¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –∏ —Ç–∞–º–æ–∂–Ω–∏)',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–î–æ $50', callback_data: 'value:50' },
              { text: '–î–æ $100', callback_data: 'value:100' },
              { text: '–î–æ $200', callback_data: 'value:200' }
            ],
            [
              { text: '–î–æ $500', callback_data: 'value:500' },
              { text: '–î–æ $1000', callback_data: 'value:1000' },
              { text: '–î–æ $2000', callback_data: 'value:2000' }
            ],
            [{ text: '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É', callback_data: 'value:custom' }]
          ]
        }
      }
    )

    const valueCtx = await conversation.waitForCallbackQuery(/^value:/)
    await valueCtx.answerCallbackQuery()
    
    const valueType = valueCtx.callbackQuery.data.replace('value:', '')
    
    if (valueType === 'custom') {
      await ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150):')
      const customValueCtx = await conversation.waitFor('message:text')
      
      const value = parseFloat(customValueCtx.message!.text.replace(/[^\d.,]/g, '').replace(',', '.'))
      if (isNaN(value) || value <= 0 || value > 2000) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –î–æ–ø—É—Å—Ç–∏–º–æ –æ—Ç $1 –¥–æ $2000')
        return
      }
      orderData.declaredValue = value
    } else {
      orderData.declaredValue = parseInt(valueType)
    }
    
    orderData.declaredCurrency = 'USD'

    // –®–ê–ì 5: –ü–æ–ª—É—á–∞—Ç–µ–ª—å
    const addresses = await getUserAddresses(ctx.user!.id)
    
    if (addresses.length === 0) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤')
      return
    }

    const addressButtons = addresses.map(addr => [{
      text: `${addr.isDefault ? 'üè†' : 'üìç'} ${addr.alias}: ${addr.city.name}, ${addr.address.substring(0, 30)}...`,
      callback_data: `addr:${addr.id}`
    }])

    await ctx.reply(
      'üë§ –ö—Ç–æ –ø–æ–ª—É—á–∏—Ç –ø–æ—Å—ã–ª–∫—É?\n\n' +
      `${country.flagEmoji} ${country.name} ‚Üí üá∑üá∫ –†–æ—Å—Å–∏—è\n` +
      `‚öñÔ∏è ${orderData.weight} –∫–≥ | üí∞ ${formatCurrency(shippingCost.cost)}\n` +
      `üìù ${orderData.description} | üíµ $${orderData.declaredValue}`,
      {
        reply_markup: {
          inline_keyboard: [
            ...addressButtons,
            [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', callback_data: 'addr:new' }]
          ]
        }
      }
    )

    const addrCtx = await conversation.waitForCallbackQuery(/^addr:/)
    await addrCtx.answerCallbackQuery()
    
    const addrId = addrCtx.callbackQuery.data.replace('addr:', '')
    
    if (addrId === 'new') {
      await ctx.reply('–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ñ–∏–ª—è')
      return
    }
    
    orderData.recipientAddressId = addrId
    orderData.totalCost = shippingCost.cost

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ
    const selectedAddress = addresses.find(a => a.id === addrId)
    if (!selectedAddress) {
      await ctx.reply('‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    // –®–ê–ì 6: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    await ctx.replyWithHTML(
      'üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n' +
      'üì¶ <b>–î–µ—Ç–∞–ª–∏ –ø–æ—Å—ã–ª–∫–∏:</b>\n' +
      `‚îú –ú–∞—Ä—à—Ä—É—Ç: ${country.flagEmoji} ${escapeHtml(country.name)} ‚Üí üá∑üá∫ –†–æ—Å—Å–∏—è\n` +
      `‚îú –í–µ—Å: ${orderData.weight} –∫–≥\n` +
      `‚îú –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${escapeHtml(orderData.description!)}\n` +
      `‚îú –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $${orderData.declaredValue}\n` +
      `‚îî –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${formatDeliveryTime(shippingCost.deliveryDaysMin, shippingCost.deliveryDaysMax)}\n\n` +
      'üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b>\n' +
      `‚îú –ò–º—è: ${escapeHtml(ctx.user!.firstName)} ${ctx.user!.lastName ? escapeHtml(ctx.user!.lastName) : ''}\n` +
      `‚îú –¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.user!.phone}\n` +
      `‚îî –ê–¥—Ä–µ—Å: ${escapeHtml(selectedAddress.city.name)}, ${escapeHtml(selectedAddress.address)}\n\n` +
      `üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b> ${formatCurrency(orderData.totalCost)}`,
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å', callback_data: 'confirm:order' }],
            [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è', callback_data: 'edit:recipient' }],
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel:order' }]
          ]
        }
      }
    )

    const confirmCtx = await conversation.waitForCallbackQuery(/^(confirm|cancel|edit):/)
    await confirmCtx.answerCallbackQuery()
    
    if (confirmCtx.callbackQuery.data === 'cancel:order') {
      await ctx.editMessageText('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ')
      return
    }
    
    if (confirmCtx.callbackQuery.data === 'edit:recipient') {
      await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤')
      return
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        orderNumber: generateOrderNumber('SP'),
        type: 'SHIPPING',
        status: 'CREATED',
        userId: ctx.user!.id,
        fromCountryId: orderData.fromCountryId!,
        toCountryId: 'RU',
        weight: orderData.weight!,
        declaredValue: orderData.declaredValue!,
        declaredCurrency: orderData.declaredCurrency!,
        description: orderData.description!,
        addressId: orderData.recipientAddressId!,
        recipientName: `${ctx.user!.firstName} ${ctx.user!.lastName || ''}`,
        recipientPhone: ctx.user!.phone,
        deliveryAddress: `${selectedAddress.city.name}, ${selectedAddress.address}`,
        deliveryCost: orderData.totalCost,
        totalCost: orderData.totalCost
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É
    await ctx.editMessageText(
      `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} —Å–æ–∑–¥–∞–Ω!\n\n` +
      `üí∞ –ö –æ–ø–ª–∞—Ç–µ: ${formatCurrency(order.totalCost)}\n\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: `pay:card:${order.id}` }],
            [{ text: 'üì± –°–ë–ü', callback_data: `pay:sbp:${order.id}` }],
            [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: `pay:crypto:${order.id}` }],
            [{ text: 'üí∞ –° –±–∞–ª–∞–Ω—Å–∞', callback_data: `pay:balance:${order.id}` }]
          ]
        }
      }
    )

    logger.info('Shipping order created', {
      orderId: order.id,
      orderNumber: order.orderNumber,
      userId: ctx.user!.id
    })

  } catch (error) {
    logger.error('Failed to create shipping order:', error)
    await ctx.reply(
      '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n' +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    )
  }
}