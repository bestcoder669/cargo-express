// packages/bot/src/scenes/registration/index.ts - –°—Ü–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
import { Composer } from 'grammy'
import { conversations, createConversation } from '@grammyjs/conversations'
import type { BotContext, BotConversation } from '../../types/context'
import { prisma } from '../../services/database'
import { createUser } from '../../services/user'
import { getCitiesKeyboard } from '../../keyboards/dynamic'
import { logger } from '../../utils/logger'
import { validateEmail, validatePhone } from './validators'
import { escapeHtml } from '../../utils/formatter'

export const registrationScene = new Composer<BotContext>()

// –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registrationScene.callbackQuery('registration:start', async (ctx) => {
  await ctx.answerCallbackQuery()
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
  if (ctx.user) {
    await ctx.reply('‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    return
  }
  
  await ctx.conversation.enter('registration')
})

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º conversation –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ
export const registrationConversation = createConversation(
  async function registration(
    conversation: BotConversation,
    ctx: BotContext
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
      if (ctx.user) {
        await ctx.reply('‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
        return
      }

      const registrationData: {
        firstName?: string
        lastName?: string
        phone?: string
        email?: string
        cityId?: string
        address?: string
      } = {}

      // –®–ê–ì 1: –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
      await ctx.replyWithHTML(
        'üë§ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (1/5)</b>\n\n' +
        '–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.\n' +
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:\n\n' +
        '<i>–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤</i>'
      )

      const nameCtx = await conversation.wait()
      if (!nameCtx.message?.text) {
        await ctx.reply('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        return
      }

      const nameParts = nameCtx.message.text.trim().split(' ')
      if (nameParts.length < 1) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è')
        return
      }

      registrationData.firstName = nameParts[0]
      registrationData.lastName = nameParts.slice(1).join(' ') || undefined

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
      await ctx.api.deleteMessage(ctx.chat!.id, nameCtx.message.message_id).catch(() => {})

      // –®–ê–ì 2: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await ctx.replyWithHTML(
        'üì± <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (2/5)</b>\n\n' +
        '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n' +
        '–ù—É–∂–µ–Ω –¥–ª—è SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–≤—è–∑–∏ –∫—É—Ä—å–µ—Ä–∞',
        {
          reply_markup: {
            keyboard: [
              [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
          }
        }
      )

      const phoneCtx = await conversation.wait()
      
      if (phoneCtx.message?.contact) {
        registrationData.phone = phoneCtx.message.contact.phone_number
      } else if (phoneCtx.message?.text) {
        const phone = phoneCtx.message.text.trim()
        if (!validatePhone(phone)) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
          return
        }
        registrationData.phone = phone
      } else {
        await ctx.reply('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        return
      }

      // –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      await ctx.reply('‚úÖ –ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω', {
        reply_markup: { remove_keyboard: true }
      })

      // –®–ê–ì 3: Email
      await ctx.replyWithHTML(
        'üìß <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (3/5)</b>\n\n' +
        'Email –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:'
      )

      const emailCtx = await conversation.wait()
      if (!emailCtx.message?.text) {
        await ctx.reply('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        return
      }

      const email = emailCtx.message.text.trim().toLowerCase()
      if (!validateEmail(email)) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
      }
      registrationData.email = email

      // –®–ê–ì 4: –ì–æ—Ä–æ–¥
      await ctx.replyWithHTML(
        'üè† <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (4/5)</b>\n\n' +
        '–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:',
        {
          reply_markup: await getCitiesKeyboard()
        }
      )

      const cityCtx = await conversation.waitForCallbackQuery(/^city:/)
      await cityCtx.answerCallbackQuery()
      
      const cityId = cityCtx.callbackQuery.data.replace('city:', '')
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–∞
      if (cityId === 'search') {
        await cityCtx.editMessageText(
          'üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:'
        )
        
        const searchCtx = await conversation.wait()
        if (!searchCtx.message?.text) {
          await ctx.reply('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
          return
        }
        
        const searchKeyboard = await getCitiesKeyboard(searchCtx.message.text)
        await ctx.replyWithHTML(
          'üè† –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:',
          { reply_markup: searchKeyboard }
        )
        
        const citySearchCtx = await conversation.waitForCallbackQuery(/^city:/)
        await citySearchCtx.answerCallbackQuery()
        registrationData.cityId = citySearchCtx.callbackQuery.data.replace('city:', '')
      } else {
        registrationData.cityId = cityId
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
      const city = await prisma.city.findUnique({
        where: { id: registrationData.cityId }
      })

      if (!city) {
        await ctx.reply('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      // –®–ê–ì 5: –ê–¥—Ä–µ—Å
      await ctx.replyWithHTML(
        `üìç <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (5/5)</b>\n\n` +
        `–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –≥. ${escapeHtml(city.name)}:\n\n` +
        '–í–≤–µ–¥–∏—Ç–µ: —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞/–æ—Ñ–∏—Å\n' +
        '<i>–ü—Ä–∏–º–µ—Ä: —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 15, –∫–≤. 45</i>'
      )

      const addressCtx = await conversation.wait()
      if (!addressCtx.message?.text) {
        await ctx.reply('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        return
      }
      
      registrationData.address = addressCtx.message.text.trim()

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await createUser({
        telegramId: ctx.from!.id,
        username: ctx.from!.username,
        firstName: registrationData.firstName!,
        lastName: registrationData.lastName,
        phone: registrationData.phone!,
        email: registrationData.email!,
        referrerId: ctx.session.referrerId
      })

      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–¥—Ä–µ—Å
      await prisma.address.create({
        data: {
          userId: user.id,
          alias: '–û—Å–Ω–æ–≤–Ω–æ–π',
          cityId: registrationData.cityId!,
          address: registrationData.address!,
          isDefault: true
        }
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      ctx.user = user
      ctx.session.userId = user.id
      ctx.session.user = user

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.replyWithHTML(
        '‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n' +
        `üë§ ${escapeHtml(user.firstName)} ${user.lastName ? escapeHtml(user.lastName) : ''}\n` +
        `üì± ${registrationData.phone}\n` +
        `üìß ${registrationData.email}\n` +
        `üè† ${escapeHtml(city.name)}, ${escapeHtml(registrationData.address!)}\n\n` +
        `üÜî –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π ID: <code>#${user.customId}</code>\n` +
        'üìã –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —ç—Ç–æ—Ç ID –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—ã–ª–æ–∫!',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID', callback_data: `copy:${user.customId}` }
              ],
              [
                { text: 'üè¢ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', callback_data: 'warehouses:list' },
                { text: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'menu:main' }
              ]
            ]
          }
        }
      )

      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      logger.info('User registered', {
        userId: user.id,
        customId: user.customId,
        telegramId: user.telegramId.toString()
      })

    } catch (error) {
      logger.error('Registration failed:', error)
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      )
    }
  },
  'registration'
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è ID
registrationScene.callbackQuery(/^copy:/, async (ctx) => {
  const customId = ctx.callbackQuery.data.replace('copy:', '')
  await ctx.answerCallbackQuery({
    text: `ID #${customId} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!`,
    show_alert: true
  })
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
registrationScene.callbackQuery('registration:cancel', async (ctx) => {
  await ctx.answerCallbackQuery()
  await ctx.editMessageText('‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
})