// packages/bot/src/scenes/warehouses.ts - –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫–ª–∞–¥–æ–≤
import { Composer } from 'grammy'
import type { BotContext } from '../types/context'
import { prisma } from '../services/database'
import { getWarehousesKeyboard } from '../keyboards/dynamic'
import { formatCurrency, escapeHtml } from '../utils/formatter'
import { logger } from '../utils/logger'

export const warehouseHandlers = new Composer<BotContext>()

// –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤
warehouseHandlers.callbackQuery('warehouses:list', async (ctx) => {
  await ctx.answerCallbackQuery()
  
  try {
    const keyboard = await getWarehousesKeyboard()
    
    await ctx.editMessageText(
      'üè¢ <b>–ù–∞—à–∏ —Å–∫–ª–∞–¥—ã –ø–æ –º–∏—Ä—É</b>\n\n' +
      `–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ—Å—ã–ª–∫–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID: <code>#${ctx.user?.customId || 'XXXXX'}</code>\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–¥—Ä–µ—Å–∞:',
      {
        reply_markup: keyboard,
        parse_mode: 'HTML'
      }
    )
  } catch (error) {
    logger.error('Failed to show warehouses:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–ª–∞–¥–æ–≤')
  }
})

// –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–ª–∞–¥–∞
warehouseHandlers.callbackQuery(/^warehouse:/, async (ctx) => {
  await ctx.answerCallbackQuery()
  
  const countryId = ctx.callbackQuery.data.replace('warehouse:', '')
  
  try {
    const country = await prisma.country.findUnique({
      where: { id: countryId },
      include: {
        warehouses: {
          where: { isActive: true },
          take: 1
        },
        tariffsFrom: {
          where: {
            toCountryId: 'RU',
            isActive: true
          },
          take: 1
        }
      }
    })

    if (!country || !country.warehouses[0]) {
      await ctx.reply('‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    const warehouse = country.warehouses[0]
    const tariff = country.tariffsFrom[0]

    let restrictions = ''
    if (warehouse.restrictions) {
      try {
        const restrictionsList = JSON.parse(warehouse.restrictions) as string[]
        if (Array.isArray(restrictionsList) && restrictionsList.length > 0) {
          restrictions = '‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã: ' + restrictionsList.join(', ') + '\n'
        }
      } catch {
        restrictions = '‚Ä¢ ' + warehouse.restrictions + '\n'
      }
    }

    await ctx.editMessageText(
      `${country.flagEmoji} <b>–°–∫–ª–∞–¥ –≤ ${escapeHtml(country.name)}</b>\n\n` +
      'üìç <b>–ê–î–†–ï–° –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò:</b>\n' +
      `CargoExpress Warehouse\n` +
      `Customer ID: <code>#${ctx.user?.customId || 'XXXXX'}</code>\n` +
      `${escapeHtml(warehouse.address)}\n` +
      `${escapeHtml(country.name)}\n\n` +
      (warehouse.phone ? `üìû ${warehouse.phone}\n` : '') +
      (warehouse.email ? `üìß ${warehouse.email}\n` : '') +
      (warehouse.workingHours ? `‚è∞ ${warehouse.workingHours}\n` : '') +
      '\nüí∞ <b>–¢–ê–†–ò–§ –í –†–û–°–°–ò–Æ:</b>\n' +
      `‚Ä¢ ${formatCurrency(tariff.pricePerKg)} –∑–∞ –∫–∏–ª–æ–≥—Ä–∞–º–º\n` +
      `‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${formatCurrency(tariff.minPrice)} –∑–∞ –ø–æ—Å—ã–ª–∫—É\n` +
      `‚Ä¢ –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: ${tariff.deliveryDaysMin}-${tariff.deliveryDaysMax} –¥–Ω–µ–π\n\n` +
      'üö® <b>–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:</b>\n' +
      `‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: ${warehouse.maxWeightKg} –∫–≥\n` +
      restrictions +
      `‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: –¥–æ $${warehouse.maxDeclaredValue}\n` +
      '‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ: 1-2 –¥–Ω—è\n\n' +
      'üìã <b>–í–ê–ñ–ù–û:</b>\n' +
      `–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–∞—à ID: <code>#${ctx.user?.customId || 'XXXXX'}</code>`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å', callback_data: `copy:address:${warehouse.id}` }
            ],
            [
              { text: 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data: `shipping:from:${country.id}` },
              { text: 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: `calculator:country:${country.id}` }
            ],
            [
              { text: '‚¨ÖÔ∏è –í—Å–µ —Å–∫–ª–∞–¥—ã', callback_data: 'warehouses:list' },
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }
            ]
          ]
        }
      }
    )
  } catch (error) {
    logger.error('Failed to show warehouse details:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ')
  }
})

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
warehouseHandlers.callbackQuery(/^copy:address:/, async (ctx) => {
  const warehouseId = ctx.callbackQuery.data.replace('copy:address:', '')
  
  try {
    const warehouse = await prisma.warehouse.findUnique({
      where: { id: warehouseId },
      include: { country: true }
    })

    if (!warehouse) {
      await ctx.answerCallbackQuery('‚ùå –°–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    const address = 
      `CargoExpress Warehouse\n` +
      `Customer ID: #${ctx.user?.customId || 'XXXXX'}\n` +
      `${warehouse.address}\n` +
      `${warehouse.country.name}`

    await ctx.answerCallbackQuery({
      text: '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.',
      show_alert: true
    })
  } catch (error) {
    logger.error('Failed to copy address:', error)
    await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞')
  }
})

// –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ—Å—ã–ª–∫–∏
warehouseHandlers.callbackQuery(/^shipping:from:/, async (ctx) => {
  await ctx.answerCallbackQuery()
  
  const countryId = ctx.callbackQuery.data.replace('shipping:from:', '')
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –≤ —Å–µ—Å—Å–∏–∏
  ctx.session.orderCreation = {
    type: 'shipping',
    step: 'weight',
    data: { fromCountryId: countryId }
  }
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–∫–∞–∑–∞
  await ctx.conversation.enter('shippingConversation')
})

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
warehouseHandlers.callbackQuery(/^calculator:country:/, async (ctx) => {
  await ctx.answerCallbackQuery()
  
  const countryId = ctx.callbackQuery.data.replace('calculator:country:', '')
  
  try {
    const country = await prisma.country.findUnique({
      where: { id: countryId },
      include: {
        tariffsFrom: {
          where: {
            toCountryId: 'RU',
            isActive: true
          },
          take: 1
        }
      }
    })

    if (!country || !country.tariffsFrom[0]) {
      await ctx.reply('‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω')
      return
    }

    const tariff = country.tariffsFrom[0]
    const weights = [0.5, 1, 2, 3, 5, 10, 15, 20]
    
    let calculatorText = `üìä <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n`
    calculatorText += `${country.flagEmoji} ${country.name} ‚Üí üá∑üá∫ –†–æ—Å—Å–∏—è\n`
    calculatorText += `–¢–∞—Ä–∏—Ñ: ${formatCurrency(tariff.pricePerKg)}/–∫–≥ (–º–∏–Ω. ${formatCurrency(tariff.minPrice)})\n\n`
    calculatorText += '<b>–ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n'
    
    weights.forEach(weight => {
      const cost = Math.max(Number(tariff.pricePerKg) * weight, Number(tariff.minPrice))
      calculatorText += `‚Ä¢ ${weight} –∫–≥ = ${formatCurrency(cost)}\n`
    })
    
    calculatorText += '\n<i>üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –≤–µ—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤</i>'

    await ctx.editMessageText(calculatorText, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ—Å—ã–ª–∫—É', callback_data: `shipping:from:${country.id}` }
          ],
          [
            { text: '‚¨ÖÔ∏è –ö —Å–∫–ª–∞–¥—É', callback_data: `warehouse:${country.id}` },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }
          ]
        ]
      }
    })
  } catch (error) {
    logger.error('Failed to show calculator:', error)
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
  }
})