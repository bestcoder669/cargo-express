// packages/bot/src/scenes/purchase/index.ts - –°—Ü–µ–Ω–∞ –≤—ã–∫—É–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤
import { Composer } from 'grammy'
import { createConversation } from '@grammyjs/conversations'
import type { BotContext, BotConversation } from '../../types/context'
import { prisma, generateOrderNumber } from '../../services/database'
import { getUserAddresses } from '../../services/user'
import { getCountriesKeyboard } from '../../keyboards/dynamic'
import { formatCurrency, escapeHtml } from '../../utils/formatter'
import { logger } from '../../utils/logger'
import Decimal from 'decimal.js'

export const purchaseScene = new Composer<BotContext>()

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–∫—É–ø–∞
purchaseScene.callbackQuery('purchase:new', async (ctx) => {
  await ctx.answerCallbackQuery()
  
  if (!ctx.user) {
    await ctx.reply('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start')
    return
  }
  
  await ctx.editMessageText(
    'üõí <b>–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞</b>\n\n' +
    '–ú—ã –∫—É–ø–∏–º —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∞—Å –∏ –¥–æ—Å—Ç–∞–≤–∏–º –≤ –†–æ—Å—Å–∏—é\n' +
    '–ü–æ–ª–Ω–∞—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä + –∫–æ–º–∏—Å—Å–∏—è\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:',
    {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîó –í—ã–∫—É–ø –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ', callback_data: 'purchase:link' }],
          [{ text: 'üí∞ –¢–æ–≤–∞—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π', callback_data: 'purchase:fixed' }],
          [{ text: 'üè¢ –°–∫–ª–∞–¥—ã –¥–ª—è –≤—ã–∫—É–ø–∞', callback_data: 'warehouses:list' }],
          [{ text: '‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }]
        ]
      }
    }
  )
})

// –í—ã–∫—É–ø –ø–æ —Å—Å—ã–ª–∫–µ
purchaseScene.callbackQuery('purchase:link', async (ctx) => {
  await ctx.answerCallbackQuery()
  await ctx.conversation.enter('purchaseByLink')
})

// –¢–æ–≤–∞—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
purchaseScene.callbackQuery('purchase:fixed', async (ctx) => {
  await ctx.answerCallbackQuery()
  await ctx.conversation.enter('purchaseFixed')
})

// Conversation –¥–ª—è –≤—ã–∫—É–ø–∞ –ø–æ —Å—Å—ã–ª–∫–µ
export const purchaseByLinkConversation = createConversation(
  async function purchaseByLink(
    conversation: BotConversation,
    ctx: BotContext
  ): Promise<void> {
    try {
      const orderData: {
        countryId?: string
        productUrl?: string
        productName?: string
        productPrice?: number
        currency?: string
        quantity?: number
        notes?: string
        addressId?: string
      } = {}

      // –®–ê–ì 1: –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
      await ctx.editMessageText(
        'üåç <b>–í—ã–∫—É–ø –ø–æ —Å—Å—ã–ª–∫–µ</b>\n\n' +
        '–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω?',
        {
          parse_mode: 'HTML',
          reply_markup: await getCountriesKeyboard('purchase')
        }
      )

      const countryCtx = await conversation.waitForCallbackQuery(/^purchase:country:/)
      await countryCtx.answerCallbackQuery()
      
      orderData.countryId = countryCtx.callbackQuery.data.replace('purchase:country:', '')
      
      const country = await prisma.country.findUnique({
        where: { id: orderData.countryId }
      })

      if (!country) {
        await ctx.reply('‚ùå –°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
        return
      }

      // –®–ê–ì 2: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä
      await ctx.reply(
        `üîó <b>–í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞ –∏–∑ ${country.flagEmoji} ${country.name}</b>\n\n` +
        `–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–∫—É–ø: ${country.purchaseCommission}%\n\n` +
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:',
        { parse_mode: 'HTML' }
      )

      const urlCtx = await conversation.wait()
      if (!urlCtx.message?.text) {
        await ctx.reply('‚ùå –í—ã–∫—É–ø –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }

      orderData.productUrl = urlCtx.message.text.trim()

      // –®–ê–ì 3: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)
      await ctx.reply(
        'üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ):',
        { parse_mode: 'HTML' }
      )

      const nameCtx = await conversation.wait()
      if (!nameCtx.message?.text) {
        await ctx.reply('‚ùå –í—ã–∫—É–ø –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }

      orderData.productName = nameCtx.message.text.trim()

      // –®–ê–ì 4: –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
      await ctx.reply(
        `üí∞ <b>–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞</b>\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ ${country.currency}:\n` +
        '<i>–ù–∞–ø—Ä–∏–º–µ—Ä: 99.99</i>',
        { parse_mode: 'HTML' }
      )

      const priceCtx = await conversation.wait()
      if (!priceCtx.message?.text) {
        await ctx.reply('‚ùå –í—ã–∫—É–ø –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }

      const price = parseFloat(priceCtx.message.text.replace(',', '.').replace(/[^\d.]/g, ''))
      if (isNaN(price) || price <= 0) {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞')
        return
      }

      orderData.productPrice = price
      orderData.currency = country.currency

      // –®–ê–ì 5: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      await ctx.reply(
        'üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '1 —à—Ç', callback_data: 'qty:1' },
                { text: '2 —à—Ç', callback_data: 'qty:2' },
                { text: '3 —à—Ç', callback_data: 'qty:3' }
              ],
              [
                { text: '5 —à—Ç', callback_data: 'qty:5' },
                { text: '10 —à—Ç', callback_data: 'qty:10' },
                { text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ', callback_data: 'qty:custom' }
              ]
            ]
          }
        }
      )

      const qtyCtx = await conversation.waitForCallbackQuery(/^qty:/)
      await qtyCtx.answerCallbackQuery()
      
      const qtyValue = qtyCtx.callbackQuery.data.replace('qty:', '')
      if (qtyValue === 'custom') {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
        const customQtyCtx = await conversation.wait()
        const qty = parseInt(customQtyCtx.message?.text || '0')
        if (isNaN(qty) || qty <= 0) {
          await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
          return
        }
        orderData.quantity = qty
      } else {
        orderData.quantity = parseInt(qtyValue)
      }

      // –®–ê–ì 6: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è
      await ctx.reply(
        'üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b>\n\n' +
        '–ï—Å—Ç—å –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Ç–æ–≤–∞—Ä—É?\n' +
        '(—Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —Ç.–¥.)',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ë–µ–∑ –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π', callback_data: 'notes:none' }],
              [{ text: '‚úèÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è', callback_data: 'notes:custom' }]
            ]
          }
        }
      )

      const notesCtx = await conversation.waitForCallbackQuery(/^notes:/)
      await notesCtx.answerCallbackQuery()
      
      if (notesCtx.callbackQuery.data === 'notes:custom') {
        await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:')
        const customNotesCtx = await conversation.wait()
        orderData.notes = customNotesCtx.message?.text
      }

      // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const commission = new Decimal(orderData.productPrice!)
        .times(orderData.quantity!)
        .times(country.purchaseCommission)
        .dividedBy(100)
      
      const productTotal = new Decimal(orderData.productPrice!)
        .times(orderData.quantity!)
      
      const prepayment = productTotal.plus(commission)
      
      // –ö—É—Ä—Å –≤–∞–ª—é—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
      const exchangeRate = getExchangeRate(orderData.currency!)
      const prepaymentRub = prepayment.times(exchangeRate)

      // –®–ê–ì 7: –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
      const addresses = await getUserAddresses(ctx.user!.id)
      
      if (addresses.length === 0) {
        await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤')
        return
      }

      const addressButtons = addresses.map(addr => [{
        text: `${addr.isDefault ? 'üè†' : 'üìç'} ${addr.alias}: ${addr.city.name}`,
        callback_data: `addr:${addr.id}`
      }])

      await ctx.reply(
        'üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n' +
        '–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è?',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: addressButtons
          }
        }
      )

      const addrCtx = await conversation.waitForCallbackQuery(/^addr:/)
      await addrCtx.answerCallbackQuery()
      orderData.addressId = addrCtx.callbackQuery.data.replace('addr:', '')

      // –®–ê–ì 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      await ctx.replyWithHTML(
        'üõí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –≤—ã–∫—É–ø</b>\n\n' +
        `üì¶ ${escapeHtml(orderData.productName!)} √ó ${orderData.quantity} —à—Ç\n` +
        `${country.flagEmoji} –ú–∞–≥–∞–∑–∏–Ω: ${escapeHtml(country.name)}\n` +
        (orderData.notes ? `üí¨ –ü–æ–∂–µ–ª–∞–Ω–∏—è: ${escapeHtml(orderData.notes)}\n` : '') +
        '\nüíµ <b>–ü–†–ï–î–û–ü–õ–ê–¢–ê (–ø–æ–ª–Ω–∞—è –∑–∞ —Ç–æ–≤–∞—Ä):</b>\n' +
        `‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ${orderData.currency} ${productTotal.toFixed(2)} (~${formatCurrency(productTotal.times(exchangeRate))})\n` +
        `‚îú –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–∫—É–ø (${country.purchaseCommission}%): ~${formatCurrency(commission.times(exchangeRate))}\n` +
        `‚îî <b>–ò–¢–û–ì–û –ü–†–ï–î–û–ü–õ–ê–¢–ê: ~${formatCurrency(prepaymentRub)}</b>\n\n` +
        'üì¶ <b>–î–û–ü–õ–ê–¢–ê (—Ç–æ–ª—å–∫–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É):</b>\n' +
        '‚îú –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –ø–æ —Ñ–∞–∫—Ç—É –≤–µ—Å–∞\n' +
        '‚îú –¢–∞—Ä–∏—Ñ –¥–æ—Å—Ç–∞–≤–∫–∏: –æ—Ç 450‚ÇΩ/–∫–≥\n' +
        '‚îî –û–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥\n\n' +
        '‚è±Ô∏è <b>–°—Ä–æ–∫–∏:</b>\n' +
        '‚îú –í—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞: 1-3 –¥–Ω—è\n' +
        '‚îî –î–æ—Å—Ç–∞–≤–∫–∞ –≤ –†–§: 10-18 –¥–Ω–µ–π',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–ø–ª–∞—Ç–∏—Ç—å', callback_data: 'confirm:purchase' }],
              [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'edit:purchase' }],
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel:purchase' }]
            ]
          }
        }
      )

      const confirmCtx = await conversation.waitForCallbackQuery(/^(confirm|cancel|edit):/)
      await confirmCtx.answerCallbackQuery()
      
      if (confirmCtx.callbackQuery.data === 'cancel:purchase') {
        await ctx.editMessageText('‚ùå –ó–∞–∫–∞–∑ –Ω–∞ –≤—ã–∫—É–ø –æ—Ç–º–µ–Ω–µ–Ω')
        return
      }

      if (confirmCtx.callbackQuery.data === 'edit:purchase') {
        await ctx.reply('–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ')
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const order = await prisma.order.create({
        data: {
          orderNumber: generateOrderNumber('PU'),
          type: 'PURCHASE',
          status: 'CREATED',
          userId: ctx.user!.id,
          fromCountryId: orderData.countryId!,
          toCountryId: 'RU',
          purchaseUrl: orderData.productUrl,
          purchaseNotes: orderData.notes,
          addressId: orderData.addressId!,
          productCost: productTotal,
          commission,
          prepaidAmount: prepaymentRub,
          totalCost: prepaymentRub, // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞
          description: `${orderData.productName} x${orderData.quantity}`,
          declaredValue: productTotal.toNumber(),
          declaredCurrency: orderData.currency
        }
      })

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      await prisma.orderItem.create({
        data: {
          orderId: order.id,
          name: orderData.productName!,
          quantity: orderData.quantity!,
          price: orderData.productPrice!,
          currency: orderData.currency!
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø–ª–∞—Ç—É
      await ctx.editMessageText(
        `‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –≤—ã–∫—É–ø #${order.orderNumber} —Å–æ–∑–¥–∞–Ω!\n\n` +
        `üí∞ –ö –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–µ: ${formatCurrency(order.prepaidAmount || order.totalCost)}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞', callback_data: `pay:card:${order.id}` }],
              [{ text: 'üì± –°–ë–ü', callback_data: `pay:sbp:${order.id}` }],
              [{ text: '‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data: `pay:crypto:${order.id}` }],
              [{ text: 'üí∞ –° –±–∞–ª–∞–Ω—Å–∞', callback_data: `pay:balance:${order.id}` }]
            ]
          }
        }
      )

      logger.info('Purchase order created', {
        orderId: order.id,
        orderNumber: order.orderNumber,
        userId: ctx.user!.id
      })

    } catch (error) {
      logger.error('Failed to create purchase order:', error)
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n' +
        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      )
    }
  },
  'purchaseByLink'
)

// Conversation –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
export const purchaseFixedConversation = createConversation(
  async function purchaseFixed(
    conversation: BotConversation,
    ctx: BotContext
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
      const countries = await prisma.country.findMany({
        where: {
          isActive: true,
          fixedProducts: {
            some: { isActive: true }
          }
        },
        include: {
          _count: {
            select: {
              fixedProducts: {
                where: { isActive: true }
              }
            }
          }
        },
        orderBy: {
          popularityScore: 'desc'
        }
      })

      if (countries.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏')
        return
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
      const countryButtons = countries.map(c => [{
        text: `${c.flagEmoji} ${c.name} (${c._count.fixedProducts} —Ç–æ–≤–∞—Ä–æ–≤)`,
        callback_data: `fixed:country:${c.id}`
      }])

      await ctx.editMessageText(
        'üí∞ <b>–¢–æ–≤–∞—Ä—ã —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏</b>\n\n' +
        '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º\n' +
        '–ö–æ–º–∏—Å—Å–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å!\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              ...countryButtons,
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'purchase:new' }]
            ]
          }
        }
      )

      const countryCtx = await conversation.waitForCallbackQuery(/^fixed:country:/)
      await countryCtx.answerCallbackQuery()
      const countryId = countryCtx.callbackQuery.data.replace('fixed:country:', '')

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
      const categories = await prisma.productCategory.findMany({
        where: {
          products: {
            some: {
              countryId,
              isActive: true
            }
          }
        },
        include: {
          _count: {
            select: {
              products: {
                where: {
                  countryId,
                  isActive: true
                }
              }
            }
          }
        },
        orderBy: {
          sortOrder: 'asc'
        }
      })

      const categoryButtons = categories.map(c => [{
        text: `${c.icon} ${c.name} (${c._count.products})`,
        callback_data: `fixed:category:${c.id}`
      }])

      await ctx.editMessageText(
        'üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:</b>',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              ...categoryButtons,
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'purchase:fixed' }]
            ]
          }
        }
      )

      const categoryCtx = await conversation.waitForCallbackQuery(/^fixed:category:/)
      await categoryCtx.answerCallbackQuery()
      const categoryId = categoryCtx.callbackQuery.data.replace('fixed:category:', '')

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      const products = await prisma.fixedPriceProduct.findMany({
        where: {
          countryId,
          categoryId,
          isActive: true,
          isAvailable: true
        },
        orderBy: [
          { isPopular: 'desc' },
          { name: 'asc' }
        ],
        take: 10
      })

      if (products.length === 0) {
        await ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
        return
      }

      const productButtons = products.map(p => [{
        text: `${p.isPopular ? '‚≠ê ' : ''}${p.name} - $${p.price}`,
        callback_data: `fixed:product:${p.id}`
      }])

      await ctx.editMessageText(
        'üõí <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>',
        {
          parse_mode: 'HTML',
          reply_markup: {
            inline_keyboard: [
              ...productButtons,
              [{ text: '‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'purchase:fixed' }]
            ]
          }
        }
      )

      const productCtx = await conversation.waitForCallbackQuery(/^fixed:product:/)
      await productCtx.answerCallbackQuery()
      const productId = productCtx.callbackQuery.data.replace('fixed:product:', '')

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
      const product = await prisma.fixedPriceProduct.findUnique({
        where: { id: productId },
        include: {
          country: true,
          category: true
        }
      })

      if (!product) {
        await ctx.reply('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
        return
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
      const exchangeRate = getExchangeRate(product.currency)
      const priceRub = new Decimal(product.price).times(exchangeRate)
      const deliveryMin = new Decimal(product.estimatedWeight).times(450) // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ
      const deliveryMax = new Decimal(product.estimatedWeight).times(850) // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞—Ä–∏—Ñ

      await ctx.replyWithHTML(
        `${product.category.icon} <b>${escapeHtml(product.name)}</b>\n\n` +
        `üí∞ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: $${product.price}\n` +
        'üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ - –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–ø–ª–∞—Ç –∑–∞ —Ç–æ–≤–∞—Ä!\n\n' +
        '<b>üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>\n' +
        '‚Ä¢ –°–∞–º —Ç–æ–≤–∞—Ä –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ\n' +
        '‚Ä¢ –í—ã–∫—É–ø –∏ –≤—Å–µ —Å–±–æ—Ä—ã\n' +
        '‚Ä¢ –£–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏\n' +
        '‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n\n' +
        `‚öñÔ∏è –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å: ${product.estimatedWeight} –∫–≥\n` +
        `üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${formatCurrency(deliveryMin)}-${formatCurrency(deliveryMax)}\n\n` +
        '<b>üíµ –ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨:</b>\n' +
        `‚îú –¢–æ–≤–∞—Ä: $${product.price} (~${formatCurrency(priceRub)})\n` +
        `‚îú –î–æ—Å—Ç–∞–≤–∫–∞: ~${formatCurrency(deliveryMin)}-${formatCurrency(deliveryMax)}\n` +
        `‚îî <b>–ò–¢–û–ì–û: ~${formatCurrency(priceRub.plus(deliveryMin))}-${formatCurrency(priceRub.plus(deliveryMax))}</b>\n\n` +
        'üõí –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:',
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '1 —à—Ç', callback_data: 'fixed:qty:1' },
                { text: '2 —à—Ç', callback_data: 'fixed:qty:2' },
                { text: '3 —à—Ç', callback_data: 'fixed:qty:3' }
              ],
              [{ text: '‚úèÔ∏è –î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data: 'fixed:qty:custom' }],
              [{ text: '‚¨ÖÔ∏è –ö —Ç–æ–≤–∞—Ä–∞–º', callback_data: 'purchase:fixed' }]
            ]
          }
        }
      )

      const qtyCtx = await conversation.waitForCallbackQuery(/^fixed:qty:/)
      await qtyCtx.answerCallbackQuery()
      
      let quantity = 1
      const qtyValue = qtyCtx.callbackQuery.data.replace('fixed:qty:', '')
      if (qtyValue === 'custom') {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
        const customQtyCtx = await conversation.wait()
        quantity = parseInt(customQtyCtx.message?.text || '1')
        if (isNaN(quantity) || quantity <= 0) quantity = 1
      } else {
        quantity = parseInt(qtyValue)
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º
      const totalPrice = new Decimal(product.price).times(quantity).times(exchangeRate)
      
      const order = await prisma.order.create({
        data: {
          orderNumber: generateOrderNumber('FP'),
          type: 'FIXED_PRICE',
          status: 'CREATED',
          userId: ctx.user!.id,
          fromCountryId: product.countryId,
          toCountryId: 'RU',
          weight: new Decimal(product.estimatedWeight).times(quantity),
          description: `${product.name} x${quantity}`,
          productCost: totalPrice,
          prepaidAmount: totalPrice,
          totalCost: totalPrice,
          declaredValue: new Decimal(product.price).times(quantity).toNumber(),
          declaredCurrency: product.currency
        }
      })

      // –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      await prisma.orderItem.create({
        data: {
          orderId: order.id,
          productId: product.id,
          name: product.name,
          quantity,
          price: product.price,
          currency: product.currency
        }
      })

      await ctx.editMessageText(
        `‚úÖ –ó–∞–∫–∞–∑ #${order.orderNumber} —Å–æ–∑–¥–∞–Ω!\n\n` +
        `${product.name} √ó ${quantity} —à—Ç\n` +
        `üí∞ –ö –æ–ø–ª–∞—Ç–µ: ${formatCurrency(totalPrice)}\n\n` +
        '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –≤—ã–∫—É–ø–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º!',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: `pay:card:${order.id}` }],
              [{ text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'orders:list' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'menu:main' }]
            ]
          }
        }
      )

    } catch (error) {
      logger.error('Failed to process fixed price purchase:', error)
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
    }
  },
  'purchaseFixed'
)

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
function getExchangeRate(currency: string): number {
  const rates: Record<string, number> = {
    'USD': 90,
    'EUR': 100,
    'GBP': 115,
    'CNY': 13,
    'TRY': 3,
    'KRW': 0.07,
    'JPY': 0.6
  }
  return rates[currency] || 90
}