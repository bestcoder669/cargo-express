// packages/bot/src/keyboards/main.ts - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import { InlineKeyboard, Keyboard } from 'grammy'
import type { BotContext } from '../types/context'
import { getUserStats } from '../services/stats'
import { formatCurrency } from '../utils/formatter'

export const mainMenuKeyboard = async (ctx: BotContext): Promise<InlineKeyboard> => {
  const keyboard = new InlineKeyboard()
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è - 2x2 —Å–µ—Ç–∫–∞ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
  keyboard
    .text('üì¶ –ù–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞', 'shipping:new')
    .text('üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä', 'purchase:new')
    .row()
    .text('üìç –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'orders:list')
    .text('üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'profile:main')
  
  // –ê–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  if (ctx.isAdmin) {
    keyboard.row().text('üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin:dashboard')
  }
  
  return keyboard
}

export const quickActionsKeyboard = new InlineKeyboard()
  .text('üè¢ –ê–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤', 'warehouses:list')
  .text('üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', 'calculator:start')
  .row()
  .text('üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', 'support:start')
  .text('‚ùì –ü–æ–º–æ—â—å', 'help:main')

export const profileKeyboard = async (userId: string): Promise<InlineKeyboard> => {
  const stats = await getUserStats(userId)
  const keyboard = new InlineKeyboard()
  
  keyboard
    .text(`üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å (${formatCurrency(stats.balance)})`, 'payment:topup')
    .row()
    .text('üì¶ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤', 'orders:history')
    .text('üìç –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', 'addresses:list')
    .row()
    .text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings:main')
    .text('üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', 'referral:info')
  
  if (stats.vipTier !== 'REGULAR') {
    keyboard.row().text('‚≠ê VIP —Å—Ç–∞—Ç—É—Å', 'vip:status')
  }
  
  keyboard.row().text('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main')
  
  return keyboard
}

export const backButton = (callback: string) => 
  new InlineKeyboard().text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback)

export const cancelButton = new InlineKeyboard()
  .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')

export const confirmKeyboard = new InlineKeyboard()
  .text('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'confirm')
  .text('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')

// packages/bot/src/keyboards/dynamic.ts - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ –ë–î
import { InlineKeyboard } from 'grammy'
import { prisma } from '../services/database'
import { formatCurrency } from '../utils/formatter'

export async function getWarehousesKeyboard(): Promise<InlineKeyboard> {
  const warehouses = await prisma.country.findMany({
    where: {
      isActive: true,
      shippingAvailable: true,
      warehouses: {
        some: { isActive: true }
      }
    },
    include: {
      warehouses: {
        where: { isActive: true },
        take: 1
      },
      tariffs: {
        where: { 
          toCountryId: 'RU',
          isActive: true 
        },
        take: 1
      }
    },
    orderBy: [
      { popularityScore: 'desc' },
      { name: 'asc' }
    ]
  })
  
  const keyboard = new InlineKeyboard()
  
  for (const country of warehouses) {
    const tariff = country.tariffs[0]
    if (!tariff) continue
    
    const buttonText = `${country.flagEmoji} ${country.name} (–æ—Ç ${formatCurrency(tariff.pricePerKg)}/–∫–≥)`
    keyboard.text(buttonText, `warehouse:${country.id}`).row()
  }
  
  keyboard
    .text('üìä –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏', 'calculator:start')
    .text('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'menu:main')
  
  return keyboard
}

export async function getCitiesKeyboard(search?: string): Promise<InlineKeyboard> {
  const cities = await prisma.city.findMany({
    where: {
      countryCode: 'RU',
      isActive: true,
      ...(search ? {
        OR: [
          { name: { contains: search, mode: 'insensitive' } },
          { region: { contains: search, mode: 'insensitive' } }
        ]
      } : {
        isPopular: true
      })
    },
    orderBy: [
      { isPopular: 'desc' },
      { population: 'desc' },
      { name: 'asc' }
    ],
    take: 12
  })
  
  const keyboard = new InlineKeyboard()
  let row: string[][] = []
  
  for (const city of cities) {
    row.push([city.name, `city:${city.id}`])
    
    if (row.length === 3) {
      keyboard.add(...row.map(([text, data]) => ({ text, callback_data: data })))
      keyboard.row()
      row = []
    }
  }
  
  if (row.length > 0) {
    keyboard.add(...row.map(([text, data]) => ({ text, callback_data: data })))
    keyboard.row()
  }
  
  if (!search) {
    keyboard.text('üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', 'city:search')
  } else {
    keyboard.text('‚¨ÖÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–æ—Ä–æ–¥–∞', 'city:popular')
  }
  
  return keyboard
}

export async function getCountriesKeyboard(
  type: 'shipping' | 'purchase'
): Promise<InlineKeyboard> {
  const countries = await prisma.country.findMany({
    where: {
      isActive: true,
      [type === 'shipping' ? 'shippingAvailable' : 'purchaseAvailable']: true
    },
    include: {
      _count: {
        select: {
          orders: {
            where: {
              createdAt: {
                gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) // Last 30 days
              }
            }
          }
        }
      }
    },
    orderBy: [
      { popularityScore: 'desc' },
      { name: 'asc' }
    ]
  })
  
  const keyboard = new InlineKeyboard()
  
  for (const country of countries) {
    let buttonText = `${country.flagEmoji} ${country.name}`
    
    if (type === 'purchase') {
      buttonText += ` (–∫–æ–º–∏—Å—Å–∏—è ${country.purchaseCommission}%)`
    }
    
    if (country._count.orders > 0) {
      buttonText += ' üî•'
    }
    
    keyboard.text(buttonText, `${type}:country:${country.id}`).row()
  }
  
  keyboard.text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', type === 'shipping' ? 'shipping:new' : 'purchase:new')
  
  return keyboard
}

export async function getWeightKeyboard(countryId: string): Promise<InlineKeyboard> {
  const tariff = await prisma.shippingTariff.findFirst({
    where: {
      fromCountryId: countryId,
      toCountryId: 'RU',
      isActive: true
    }
  })
  
  if (!tariff) {
    return new InlineKeyboard().text('‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
  }
  
  const keyboard = new InlineKeyboard()
  const weights = [0.5, 1, 1.5, 2, 2.5, 3, 5, 10, 15, 20, 30, 50]
  
  let row = 0
  for (let i = 0; i < weights.length; i++) {
    const weight = weights[i]
    const cost = Math.max(weight * tariff.pricePerKg, tariff.minPrice)
    const buttonText = `${weight} –∫–≥ - ${formatCurrency(cost)}`
    
    keyboard.text(buttonText, `weight:${weight}`)
    
    if ((i + 1) % 3 === 0) {
      keyboard.row()
      row++
    }
  }
  
  keyboard
    .row()
    .text('‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –≤–µ—Å', 'weight:custom')
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'shipping:country')
  
  return keyboard
}

// packages/bot/src/keyboards/admin.ts - –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import { InlineKeyboard } from 'grammy'
import { prisma } from '../services/database'
import { formatCurrency } from '../utils/formatter'
import type { AdminRole } from '../types/database'

export async function getAdminDashboardKeyboard(role: AdminRole): Promise<InlineKeyboard> {
  const keyboard = new InlineKeyboard()
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const problemOrders = await prisma.order.count({
    where: { status: 'PROBLEM' }
  })
  
  const pendingPayments = await prisma.transaction.count({
    where: { status: 'PENDING' }
  })
  
  const openChats = await prisma.supportChat.count({
    where: { status: { in: ['OPEN', 'IN_PROGRESS'] } }
  })
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
  if (['SUPER_ADMIN', 'ORDER_MANAGER'].includes(role)) {
    keyboard.text(
      `üì¶ –ó–∞–∫–∞–∑—ã${problemOrders > 0 ? ` (${problemOrders}‚ö†Ô∏è)` : ''}`,
      'admin:orders'
    )
  }
  
  if (['SUPER_ADMIN', 'ORDER_MANAGER', 'SUPPORT_OPERATOR'].includes(role)) {
    keyboard.text('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'admin:users')
  }
  
  keyboard.row()
  
  if (['SUPER_ADMIN', 'CONTENT_MANAGER'].includes(role)) {
    keyboard.text('üåç –°—Ç—Ä–∞–Ω—ã –∏ —Å–∫–ª–∞–¥—ã', 'admin:countries')
    keyboard.text('üõí –¢–æ–≤–∞—Ä—ã', 'admin:products')
  }
  
  keyboard.row()
  
  if (['SUPER_ADMIN', 'FINANCE_MANAGER'].includes(role)) {
    keyboard.text(
      `üí∞ –§–∏–Ω–∞–Ω—Å—ã${pendingPayments > 0 ? ` (${pendingPayments}‚ö†Ô∏è)` : ''}`,
      'admin:finance'
    )
  }
  
  if (['SUPER_ADMIN', 'ORDER_MANAGER', 'SUPPORT_OPERATOR'].includes(role)) {
    keyboard.text(
      `üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞${openChats > 0 ? ` (${openChats}üî•)` : ''}`,
      'admin:support'
    )
  }
  
  keyboard.row()
  
  if (['SUPER_ADMIN', 'ORDER_MANAGER', 'FINANCE_MANAGER'].includes(role)) {
    keyboard.text('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'admin:analytics')
  }
  
  if (role === 'SUPER_ADMIN') {
    keyboard.text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin:settings')
  }
  
  keyboard.row()
  
  if (role === 'SUPER_ADMIN') {
    keyboard.text('üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã', 'admin:admins')
    keyboard.text('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin:broadcast')
  }
  
  keyboard.row()
  keyboard.text('üì± –°–∫–∞–Ω–µ—Ä', 'admin:scanner')
  keyboard.text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin:refresh')
  
  return keyboard
}

export async function getAdminOrdersKeyboard(
  filter: 'all' | 'problem' | 'pending' | 'processing' = 'all'
): Promise<InlineKeyboard> {
  const keyboard = new InlineKeyboard()
  
  // –§–∏–ª—å—Ç—Ä—ã
  keyboard
    .text(`${filter === 'problem' ? '‚Ä¢ ' : ''}‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ`, 'admin:orders:problem')
    .text(`${filter === 'pending' ? '‚Ä¢ ' : ''}‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã`, 'admin:orders:pending')
    .row()
    .text(`${filter === 'processing' ? '‚Ä¢ ' : ''}üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ`, 'admin:orders:processing')
    .text(`${filter === 'all' ? '‚Ä¢ ' : ''}üìã –í—Å–µ –∑–∞–∫–∞–∑—ã`, 'admin:orders:all')
    .row()
  
  // –î–µ–π—Å—Ç–≤–∏—è
  keyboard
    .text('üîç –ü–æ–∏—Å–∫ –ø–æ ID', 'admin:orders:search')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin:orders:stats')
    .row()
    .text('‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin:dashboard')
  
  return keyboard
}

export async function getAdminUsersKeyboard(
  filter: 'all' | 'vip' | 'new' | 'blocked' = 'all'
): Promise<InlineKeyboard> {
  const keyboard = new InlineKeyboard()
  
  // –§–∏–ª—å—Ç—Ä—ã
  keyboard
    .text(`${filter === 'vip' ? '‚Ä¢ ' : ''}üåü VIP`, 'admin:users:vip')
    .text(`${filter === 'new' ? '‚Ä¢ ' : ''}üë∂ –ù–æ–≤—ã–µ`, 'admin:users:new')
    .row()
    .text(`${filter === 'blocked' ? '‚Ä¢ ' : ''}üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ`, 'admin:users:blocked')
    .text(`${filter === 'all' ? '‚Ä¢ ' : ''}üë• –í—Å–µ`, 'admin:users:all')
    .row()
  
  // –î–µ–π—Å—Ç–≤–∏—è
  keyboard
    .text('üîç –ü–æ–∏—Å–∫', 'admin:users:search')
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin:users:stats')
    .row()
    .text('üì¢ –†–∞—Å—Å—ã–ª–∫–∞', 'admin:broadcast')
    .row()
    .text('‚¨ÖÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin:dashboard')
  
  return keyboard
}

export function getOrderActionsKeyboard(orderId: string): InlineKeyboard {
  return new InlineKeyboard()
    .text('üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', `admin:order:status:${orderId}`)
    .text('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É', `admin:order:message:${orderId}`)
    .row()
    .text('üìã –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤', `admin:order:history:${orderId}`)
    .text('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–æ–π', `admin:order:payment:${orderId}`)
    .row()
    .text('üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä', `admin:order:tracking:${orderId}`)
    .text('üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', `admin:order:comment:${orderId}`)
    .row()
    .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `admin:order:refresh:${orderId}`)
    .text('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', 'admin:orders:all')
}

export function getUserActionsKeyboard(userId: string): InlineKeyboard {
  return new InlineKeyboard()
    .text('üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º', `admin:user:balance:${userId}`)
    .text('‚≠ê VIP —Å—Ç–∞—Ç—É—Å', `admin:user:vip:${userId}`)
    .row()
    .text('üì¶ –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', `admin:user:orders:${userId}`)
    .text('üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤', `admin:user:chats:${userId}`)
    .row()
    .text('üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', `admin:user:message:${userId}`)
    .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `admin:user:stats:${userId}`)
    .row()
    .text('üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', `admin:user:block:${userId}`)
    .text('üìù –ó–∞–º–µ—Ç–∫–∞', `admin:user:note:${userId}`)
    .row()
    .text('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', `admin:user:refresh:${userId}`)
    .text('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É', 'admin:users:all')
}