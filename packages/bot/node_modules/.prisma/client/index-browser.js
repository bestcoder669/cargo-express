
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  customId: 'customId',
  balance: 'balance',
  vipTier: 'vipTier',
  vipExpiresAt: 'vipExpiresAt',
  language: 'language',
  timezone: 'timezone',
  isActive: 'isActive',
  isBlocked: 'isBlocked',
  blockReason: 'blockReason',
  referrerId: 'referrerId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastActivity: 'lastActivity'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  alias: 'alias',
  cityId: 'cityId',
  address: 'address',
  postalCode: 'postalCode',
  isDefault: 'isDefault',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  nameEn: 'nameEn',
  flagEmoji: 'flagEmoji',
  currency: 'currency',
  shippingAvailable: 'shippingAvailable',
  purchaseAvailable: 'purchaseAvailable',
  purchaseCommission: 'purchaseCommission',
  popularityScore: 'popularityScore',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  region: 'region',
  countryCode: 'countryCode',
  isPopular: 'isPopular',
  population: 'population',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  id: 'id',
  countryId: 'countryId',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  workingHours: 'workingHours',
  timezone: 'timezone',
  maxWeightKg: 'maxWeightKg',
  maxDeclaredValue: 'maxDeclaredValue',
  restrictions: 'restrictions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShippingTariffScalarFieldEnum = {
  id: 'id',
  fromCountryId: 'fromCountryId',
  toCountryId: 'toCountryId',
  pricePerKg: 'pricePerKg',
  minPrice: 'minPrice',
  deliveryDaysMin: 'deliveryDaysMin',
  deliveryDaysMax: 'deliveryDaysMax',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameEn: 'nameEn',
  icon: 'icon',
  description: 'description',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FixedPriceProductScalarFieldEnum = {
  id: 'id',
  countryId: 'countryId',
  categoryId: 'categoryId',
  name: 'name',
  nameEn: 'nameEn',
  description: 'description',
  price: 'price',
  currency: 'currency',
  estimatedWeight: 'estimatedWeight',
  imageUrl: 'imageUrl',
  productUrl: 'productUrl',
  sku: 'sku',
  isPopular: 'isPopular',
  isAvailable: 'isAvailable',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  type: 'type',
  status: 'status',
  userId: 'userId',
  fromCountryId: 'fromCountryId',
  toCountryId: 'toCountryId',
  weight: 'weight',
  declaredValue: 'declaredValue',
  declaredCurrency: 'declaredCurrency',
  description: 'description',
  purchaseUrl: 'purchaseUrl',
  purchaseNotes: 'purchaseNotes',
  recipientName: 'recipientName',
  recipientPhone: 'recipientPhone',
  addressId: 'addressId',
  deliveryAddress: 'deliveryAddress',
  productCost: 'productCost',
  commission: 'commission',
  deliveryCost: 'deliveryCost',
  totalCost: 'totalCost',
  prepaidAmount: 'prepaidAmount',
  trackingNumber: 'trackingNumber',
  internalTracking: 'internalTracking',
  adminComment: 'adminComment',
  problemReason: 'problemReason',
  estimatedDelivery: 'estimatedDelivery',
  actualDelivery: 'actualDelivery',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  name: 'name',
  quantity: 'quantity',
  price: 'price',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StatusHistoryScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  oldStatus: 'oldStatus',
  newStatus: 'newStatus',
  comment: 'comment',
  adminId: 'adminId',
  createdAt: 'createdAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  userId: 'userId',
  orderId: 'orderId',
  type: 'type',
  method: 'method',
  status: 'status',
  amount: 'amount',
  currency: 'currency',
  paymentId: 'paymentId',
  paymentUrl: 'paymentUrl',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  telegramId: 'telegramId',
  username: 'username',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  role: 'role',
  permissions: 'permissions',
  isActive: 'isActive',
  createdAt: 'createdAt',
  lastLogin: 'lastLogin'
};

exports.Prisma.AdminLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  targetType: 'targetType',
  targetId: 'targetId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SupportChatScalarFieldEnum = {
  id: 'id',
  chatNumber: 'chatNumber',
  userId: 'userId',
  topic: 'topic',
  status: 'status',
  priority: 'priority',
  operatorId: 'operatorId',
  rating: 'rating',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  closedAt: 'closedAt'
};

exports.Prisma.SupportMessageScalarFieldEnum = {
  id: 'id',
  chatId: 'chatId',
  senderId: 'senderId',
  senderType: 'senderType',
  text: 'text',
  fileUrl: 'fileUrl',
  fileType: 'fileType',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  text: 'text',
  data: 'data',
  isRead: 'isRead',
  isSent: 'isSent',
  createdAt: 'createdAt',
  sentAt: 'sentAt',
  readAt: 'readAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.VipTier = exports.$Enums.VipTier = {
  REGULAR: 'REGULAR',
  SILVER: 'SILVER',
  GOLD: 'GOLD',
  PLATINUM: 'PLATINUM'
};

exports.OrderType = exports.$Enums.OrderType = {
  SHIPPING: 'SHIPPING',
  PURCHASE: 'PURCHASE',
  FIXED_PRICE: 'FIXED_PRICE'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  CREATED: 'CREATED',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED',
  WAREHOUSE_RECEIVED: 'WAREHOUSE_RECEIVED',
  PROCESSING: 'PROCESSING',
  SHIPPED: 'SHIPPED',
  CUSTOMS: 'CUSTOMS',
  IN_TRANSIT: 'IN_TRANSIT',
  READY_PICKUP: 'READY_PICKUP',
  DELIVERED: 'DELIVERED',
  PURCHASING: 'PURCHASING',
  PURCHASED: 'PURCHASED',
  PROBLEM: 'PROBLEM'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  PAYMENT: 'PAYMENT',
  REFUND: 'REFUND',
  TOPUP: 'TOPUP',
  WITHDRAWAL: 'WITHDRAWAL',
  BONUS: 'BONUS',
  COMMISSION: 'COMMISSION'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CARD: 'CARD',
  CRYPTO: 'CRYPTO',
  SBP: 'SBP',
  BALANCE: 'BALANCE'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.AdminRole = exports.$Enums.AdminRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ORDER_MANAGER: 'ORDER_MANAGER',
  FINANCE_MANAGER: 'FINANCE_MANAGER',
  SUPPORT_OPERATOR: 'SUPPORT_OPERATOR',
  CONTENT_MANAGER: 'CONTENT_MANAGER'
};

exports.ChatStatus = exports.$Enums.ChatStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  WAITING_USER: 'WAITING_USER',
  WAITING_OPERATOR: 'WAITING_OPERATOR',
  CLOSED: 'CLOSED',
  RESOLVED: 'RESOLVED'
};

exports.ChatPriority = exports.$Enums.ChatPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ORDER_STATUS: 'ORDER_STATUS',
  PAYMENT_SUCCESS: 'PAYMENT_SUCCESS',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  DELIVERY_READY: 'DELIVERY_READY',
  SUPPORT_MESSAGE: 'SUPPORT_MESSAGE',
  SYSTEM: 'SYSTEM',
  PROMOTION: 'PROMOTION'
};

exports.Prisma.ModelName = {
  User: 'User',
  Address: 'Address',
  Country: 'Country',
  City: 'City',
  Warehouse: 'Warehouse',
  ShippingTariff: 'ShippingTariff',
  ProductCategory: 'ProductCategory',
  FixedPriceProduct: 'FixedPriceProduct',
  Order: 'Order',
  OrderItem: 'OrderItem',
  StatusHistory: 'StatusHistory',
  Transaction: 'Transaction',
  Admin: 'Admin',
  AdminLog: 'AdminLog',
  SupportChat: 'SupportChat',
  SupportMessage: 'SupportMessage',
  Notification: 'Notification'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
