generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== USERS ====================
model User {
  id         String  @id @default(cuid())
  telegramId BigInt  @unique
  username   String? @unique
  firstName  String
  lastName   String?
  phone      String
  email      String
  customId   String  @unique

  balance      Decimal   @default(0) @db.Decimal(10, 2)
  vipTier      VipTier   @default(REGULAR)
  vipExpiresAt DateTime?

  language String @default("ru")
  timezone String @default("Europe/Moscow")

  isActive    Boolean @default(true)
  isBlocked   Boolean @default(false)
  blockReason String?

  referrerId String?
  referrer   User?   @relation("Referrals", fields: [referrerId], references: [id])
  referrals  User[]  @relation("Referrals")

  addresses     Address[]
  orders        Order[]
  transactions  Transaction[]
  supportChats  SupportChat[]
  notifications Notification[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastActivity DateTime @default(now())

  @@index([telegramId])
  @@index([customId])
  @@index([email])
  @@index([phone])
}

enum VipTier {
  REGULAR
  SILVER
  GOLD
  PLATINUM
}

model Address {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  alias      String
  cityId     String
  city       City    @relation(fields: [cityId], references: [id])
  address    String
  postalCode String?

  isDefault Boolean @default(false)
  isActive  Boolean @default(true)

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, alias])
  @@index([userId])
}

// ==================== LOCATIONS ====================
model Country {
  id        String  @id @default(cuid())
  code      String  @unique
  name      String
  nameEn    String?
  flagEmoji String
  currency  String  @default("USD")

  shippingAvailable  Boolean @default(true)
  purchaseAvailable  Boolean @default(true)
  purchaseCommission Decimal @default(5) @db.Decimal(5, 2)

  popularityScore Int     @default(0)
  isActive        Boolean @default(true)

  warehouses    Warehouse[]
  tariffsFrom   ShippingTariff[]    @relation("FromCountry")
  tariffsTo     ShippingTariff[]    @relation("ToCountry")
  ordersFrom    Order[]             @relation("OrderFromCountry")
  ordersTo      Order[]             @relation("OrderToCountry")
  fixedProducts FixedPriceProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
}

model City {
  id          String  @id @default(cuid())
  name        String
  region      String?
  countryCode String  @default("RU")

  isPopular  Boolean @default(false)
  population Int?
  isActive   Boolean @default(true)

  addresses Address[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryCode])
  @@index([name])
}

model Warehouse {
  id        String  @id @default(cuid())
  countryId String
  country   Country @relation(fields: [countryId], references: [id])

  name         String
  address      String
  phone        String?
  email        String?
  workingHours String?
  timezone     String  @default("UTC")

  maxWeightKg      Decimal @default(50) @db.Decimal(5, 2)
  maxDeclaredValue Decimal @default(2000) @db.Decimal(10, 2)
  restrictions     String?

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryId])
}

// ==================== TARIFFS ====================
model ShippingTariff {
  id            String  @id @default(cuid())
  fromCountryId String
  fromCountry   Country @relation("FromCountry", fields: [fromCountryId], references: [id])
  toCountryId   String
  toCountry     Country @relation("ToCountry", fields: [toCountryId], references: [id])

  pricePerKg      Decimal @db.Decimal(8, 2)
  minPrice        Decimal @default(0) @db.Decimal(8, 2)
  deliveryDaysMin Int
  deliveryDaysMax Int

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([fromCountryId, toCountryId])
  @@index([fromCountryId])
  @@index([toCountryId])
}

// ==================== PRODUCTS ====================
model ProductCategory {
  id          String  @id @default(cuid())
  name        String
  nameEn      String?
  icon        String  @default("ðŸ“¦")
  description String?
  sortOrder   Int     @default(0)
  isActive    Boolean @default(true)

  products FixedPriceProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FixedPriceProduct {
  id         String          @id @default(cuid())
  countryId  String
  country    Country         @relation(fields: [countryId], references: [id])
  categoryId String
  category   ProductCategory @relation(fields: [categoryId], references: [id])

  name        String
  nameEn      String?
  description String?
  price       Decimal @db.Decimal(10, 2)
  currency    String  @default("USD")

  estimatedWeight Decimal @db.Decimal(5, 2)
  imageUrl        String?
  productUrl      String?
  sku             String?

  isPopular   Boolean @default(false)
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)

  orders OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([countryId])
  @@index([categoryId])
  @@index([sku])
}

// ==================== ORDERS ====================
model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  type        OrderType
  status      OrderStatus @default(CREATED)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  fromCountryId String
  fromCountry   Country @relation("OrderFromCountry", fields: [fromCountryId], references: [id])
  toCountryId   String  @default("RU")
  toCountry     Country @relation("OrderToCountry", fields: [toCountryId], references: [id])

  weight           Decimal? @db.Decimal(5, 2)
  declaredValue    Decimal? @db.Decimal(10, 2)
  declaredCurrency String?  @default("USD")
  description      String?

  purchaseUrl   String?
  purchaseNotes String?

  recipientName   String?
  recipientPhone  String?
  addressId       String?
  address         Address? @relation(fields: [addressId], references: [id])
  deliveryAddress String?

  productCost   Decimal? @db.Decimal(10, 2)
  commission    Decimal? @db.Decimal(10, 2)
  deliveryCost  Decimal? @db.Decimal(10, 2)
  totalCost     Decimal  @db.Decimal(10, 2)
  prepaidAmount Decimal? @db.Decimal(10, 2)

  trackingNumber   String?
  internalTracking String?

  adminComment  String?
  problemReason String?

  items         OrderItem[]
  statusHistory StatusHistory[]
  transactions  Transaction[]

  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([type])
  @@index([trackingNumber])
}

enum OrderType {
  SHIPPING
  PURCHASE
  FIXED_PRICE
}

enum OrderStatus {
  CREATED
  PAID
  CANCELLED
  REFUNDED
  WAREHOUSE_RECEIVED
  PROCESSING
  SHIPPED
  CUSTOMS
  IN_TRANSIT
  READY_PICKUP
  DELIVERED
  PURCHASING
  PURCHASED
  PROBLEM
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String?
  product   FixedPriceProduct? @relation(fields: [productId], references: [id])

  name     String
  quantity Int     @default(1)
  price    Decimal @db.Decimal(10, 2)
  currency String  @default("USD")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model StatusHistory {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  oldStatus OrderStatus?
  newStatus OrderStatus
  comment   String?

  adminId String?
  admin   Admin?  @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([createdAt])
}

// ==================== PAYMENTS ====================
model Transaction {
  id            String @id @default(cuid())
  transactionId String @unique

  userId  String
  user    User    @relation(fields: [userId], references: [id])
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  type   TransactionType
  method PaymentMethod?
  status PaymentStatus   @default(PENDING)

  amount   Decimal @db.Decimal(10, 2)
  currency String  @default("RUB")

  paymentId  String?
  paymentUrl String?

  description String?
  metadata    Json?

  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@index([userId])
  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}

enum TransactionType {
  PAYMENT
  REFUND
  TOPUP
  WITHDRAWAL
  BONUS
  COMMISSION
}

enum PaymentMethod {
  CARD
  CRYPTO
  SBP
  BALANCE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
}

// ==================== ADMIN ====================
enum AdminRole {
  SUPER_ADMIN
  ORDER_MANAGER
  FINANCE_MANAGER
  SUPPORT_OPERATOR
  CONTENT_MANAGER
}

model Admin {
  id         String  @id @default(cuid())
  telegramId BigInt  @unique
  username   String? @unique
  firstName  String
  lastName   String?
  email      String? @unique

  role        AdminRole
  permissions Json?

  isActive Boolean @default(true)

  statusHistory StatusHistory[]
  adminLogs     AdminLog[]
  supportChats  SupportChat[]

  createdAt DateTime  @default(now())
  lastLogin DateTime?

  @@index([telegramId])
}

model AdminLog {
  id      String @id @default(cuid())
  adminId String
  admin   Admin  @relation(fields: [adminId], references: [id])

  action     String
  targetType String?
  targetId   String?

  oldValues Json?
  newValues Json?

  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@index([adminId])
  @@index([targetType, targetId])
  @@index([createdAt])
}

// ==================== SUPPORT ====================
model SupportChat {
  id         String @id @default(cuid())
  chatNumber String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id])

  topic    String?
  status   ChatStatus   @default(OPEN)
  priority ChatPriority @default(NORMAL)

  operatorId String?
  operator   Admin?  @relation(fields: [operatorId], references: [id])

  rating   Int?
  feedback String?

  messages SupportMessage[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?

  @@index([userId])
  @@index([status])
  @@index([operatorId])
}

enum ChatStatus {
  OPEN
  IN_PROGRESS
  WAITING_USER
  WAITING_OPERATOR
  CLOSED
  RESOLVED
}

enum ChatPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model SupportMessage {
  id     String      @id @default(cuid())
  chatId String
  chat   SupportChat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  senderId   String
  senderType String

  text     String?
  fileUrl  String?
  fileType String?

  isRead Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([chatId])
  @@index([createdAt])
}

// ==================== NOTIFICATIONS ====================
model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type  NotificationType
  title String
  text  String
  data  Json?

  isRead Boolean @default(false)
  isSent Boolean @default(false)

  createdAt DateTime  @default(now())
  sentAt    DateTime?
  readAt    DateTime?

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum NotificationType {
  ORDER_STATUS
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  DELIVERY_READY
  SUPPORT_MESSAGE
  SYSTEM
  PROMOTION
}
